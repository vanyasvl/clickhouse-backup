name: Release

on:
  push:
    tags:
      - v*.*.*

jobs:
  release:
    name: Release
    runs-on: ubuntu-latest
    strategy:
      matrix:
        golang-version:
          - "1.17"

    steps:
      - name: Checkout project
        uses: actions/checkout@v2

      - name: Setup golang
        id: setup-go
        uses: actions/setup-go@v2
        with:
          go-version: '^${{ matrix.golang-version }}'

      - name: Setup fpm and make
        run: |
          sudo apt-get install -y --no-install-recommends ruby ruby-dev gcc g++ rpm
          sudo apt-get install --no-install-recommends -y make
          sudo gem install --no-document fpm

      - name: Cache golang
        id: cache-golang
        uses: actions/cache@v2
        with:
          path: |
            ~/go/pkg/mod
            ~/.cache/go-build
          key: ${{ runner.os }}-${{ matrix.golang-version }}-golang-${{ hashFiles('go.sum') }}
          restore-keys: |
            ${{ runner.os }}-${{ matrix.golang-version }}-golang-

      - name: Install golang dependencies
        run: go mod download -x
        if: |
          steps.cache-golang.outputs.cache-hit != 'true'

      - name: Extract DOCKER_TAG version
        id: docker_tag
        run: |
          DOCKER_TAG=${GITHUB_REF##*/}
          DOCKER_TAG=${DOCKER_TAG##*\\}
          export DOCKER_TAG=${DOCKER_TAG#v}
          echo "::set-output name=docker_tag::${DOCKER_TAG:-dev}"

      - run: make build
      - run: make config
      - run: make test

      - name: Building deb, rpm and tar.gz packages
        id: make_packages
        run: |
          set -x
          export NAME=clickhouse-backup
          export VERSION=$(git describe --always --tags --abbrev=0 2>/dev/null | sed 's/^v//;s/\([^-]*-g\)/c\1/;s/-/./g')

          tar -czvf ${NAME}-linux-amd64.tar.gz build/linux/amd64
          tar -czvf ${NAME}-linux-arm64.tar.gz build/linux/arm64
          tar -czvf ${NAME}-darwin-amd64.tar.gz build/darwin/amd64
          tar -czvf ${NAME}-darwin-arm64.tar.gz build/darwin/arm64
          echo "::set-output name=tgz_linux_amd64::${NAME}-linux-amd64.tar.gz"
          echo "::set-output name=tgz_linux_arm64::${NAME}-linux-arm64.tar.gz"
          echo "::set-output name=tgz_darwin_amd64::${NAME}-darwin-amd64.tar.gz"
          echo "::set-output name=tgz_darwin_arm64::${NAME}-darwin-arm64.tar.gz"

          make packages
          cp -lv ./build/linux/*/*.deb ./
          cp -lv ./build/linux/*/*.rpm ./
          echo "::set-output name=rpm_amd64::${NAME}-${VERSION}-1.x86_64.rpm"
          echo "::set-output name=deb_amd64::${NAME}_${VERSION}_amd64.deb"
          echo "::set-output name=rpm_arm64::${NAME}-${VERSION}-1.aarch64.rpm"
          echo "::set-output name=deb_arm64::${NAME}_${VERSION}_arm64.deb"


      - name: Prepare release notes
        id: release_notes
        run: |
          awk '/^# / {s++} s == 1 {print}' ChangeLog.md > /tmp/release_notes.md
          echo "::set-output name=path::/tmp/release_notes.md"

      - name: Create release
        id: create_release
        uses: softprops/action-gh-release@v1
        if: startsWith(github.ref, 'refs/tags/')
        with:
          tag_name: ${{ steps.docker_tag.outputs.docker_tag }}
          name: ${{ steps.docker_tag.outputs.docker_tag }}
          body_path: ${{ steps.release_notes.outputs.path }}
          draft: true
          fail_on_unmatched_files: true
          files: |
            ${{ steps.make_packages.outputs.rpm_amd64 }}
            ${{ steps.make_packages.outputs.rpm_arm64 }}
            ${{ steps.make_packages.outputs.deb_amd64 }}
            ${{ steps.make_packages.outputs.deb_arm64 }}
            ${{ steps.make_packages.outputs.tgz_linux_amd64 }}
            ${{ steps.make_packages.outputs.tgz_linux_arm64 }}
            ${{ steps.make_packages.outputs.tgz_darwin_amd64 }}
            ${{ steps.make_packages.outputs.tgz_darwin_arm64 }}

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v1
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1

      - name: Building docker image
        env:
          DOCKER_REPO: ${{ secrets.DOCKER_REPO }}
          DOCKER_IMAGE: ${{ secrets.DOCKER_IMAGE }}
          DOCKER_TOKEN: ${{ secrets.DOCKER_TOKEN }}
          DOCKER_USER: ${{ secrets.DOCKER_USER }}
          DOCKER_REGISTRY: ${{ secrets.DOCKER_REGISTRY }}
          DOCKER_TAG: ${{ steps.docker_tag.outputs.docker_tag }}
        run: |
          export DOCKER_REGISTRY=${DOCKER_REGISTRY:-docker.io}
          echo ${DOCKER_TOKEN} | docker login -u ${DOCKER_USER} --password-stdin ${DOCKER_REGISTRY}

          docker buildx build --platform=linux/amd64,linux/arm64 -t ${DOCKER_REGISTRY}/${DOCKER_REPO}/${DOCKER_IMAGE}:${DOCKER_TAG} -t ${DOCKER_REGISTRY}/${DOCKER_REPO}/${DOCKER_IMAGE}:latest --pull --push .
